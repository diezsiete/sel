# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    empresa: '%env(EMPRESA)%'
    private_uploads_dir_name: 'var/uploads'
    private_uploads_base_url: '/%private_uploads_dir_name%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $webDir: '%env(DOCUMENT_ROOT)%'
            $kernelProjectDir: '%kernel.project_dir%'
            $publicUploadFilesystem: '@oneup_flysystem.public_uploads_filesystem_filesystem'
            $privateUploadFilesystem: '@oneup_flysystem.private_uploads_filesystem_filesystem'
            $privateUploadsBaseUrl: '%private_uploads_base_url%'
            $messengerAuditLogger: '@monolog.logger.messenger_audit'
            $transportFailed : '@messenger.transport.failed'
            $transportScraperHv : '@messenger.transport.scraper_hv'
            $appEnv: '%env(APP_ENV)%'
            $s3BucketName: '%env(empresa:AWS_S3_BUCKET)%'

            $migrationHvAdjuntoPath: '%env(MIGRATION_HV_ADJUNTO)%'
            $migrationDatabaseSeUrl: '%env(DATABASE_SE_URL)%'
            $migrationDatabaseSeAspiranteUrl: '%env(DATABASE_SE_ASPIRANTE_URL)%'
            #$migrationDatabaseSeVacantesUrl: '%env(DATABASE_SE_VACANTES_URL)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']



    App\Command\Autoliquidacion\AutoliquidacionCreateCommand:
        calls:
            - [setLogger, ['@monolog.logger.sel']]
    App\Command\NovasoftImport\NiEmpleadoCommand:
        calls:
            - [setLogger, ['@monolog.logger.ni_empleado']]
    App\Command\NovasoftImport\NiNominaCommand:
        calls:
            - [setLogger, ['@monolog.logger.ni_nomina']]
    App\Command\NovasoftImport\NiConvenioCommand:
        calls:
            - [setLogger, ['@monolog.logger.ni_convenio']]

    App\Command\ServicioEmpleados\ReportCache\DeleteCommand:
        calls:
            - [setLogger, ['@monolog.logger.se_report_cache_delete']]
    App\Command\ServicioEmpleados\ReportCache\ImportCommand:
        calls:
            - [setLogger, ['@monolog.logger.se_report_cache_import']]


    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\DataTable\SelDataTableFactory:
        arguments:
            - '%datatables.config%'
            - '@Omines\DataTablesBundle\Twig\TwigRenderer'
            - '@Omines\DataTablesBundle\DependencyInjection\Instantiator'
            - '@event_dispatcher'

    App\DataTable\Column\ActionsColumn\ActionButton:
        public: true
        shared: false
    App\DataTable\Column\ActionsColumn\ActionRoute:
        public: true
        shared: false
    App\DataTable\Column\ActionsColumn\ActionModal:
        public: true
        shared: false

    App\Service\Autoliquidacion\ExportPdf:
        public: true
    App\Service\Autoliquidacion\ExportZip:
        public: true

    App\Service\Evaluacion\Mensaje:
        autowire: false

    App\Service\Hv\HvWizard\HvWizard:
        factory: '@App\Service\Hv\HvWizard\HvWizardFactory'

    App\Service\Novasoft\SqlServer\Connection:
        arguments:
            - '%env(empresa:SQL_SERVER_NAME)%'
            - '%env(empresa:SQL_SERVER_DB)%'
            - '%env(empresa:SQL_SERVER_USER)%'
            - '%env(empresa:SQL_SERVER_PASSWORD)%'

    App\Service\NovasoftSsrs\ReportServer:
        arguments:
            - '%env(NOVASOFT_SSRS_USERNAME)%'
            - '%env(NOVASOFT_SSRS_PASSWORD)%'
            - '%env(NOVASOFT_SSRS_URL)%'

    SSRS\Common\Credentials:
        arguments:
            - '%env(NOVASOFT_SSRS_USERNAME)%'
            - '%env(NOVASOFT_SSRS_PASSWORD)%'

    SSRS\SSRSReport:
        arguments:
            - '@SSRS\Common\Credentials'
            - '%env(NOVASOFT_SSRS_URL)%'

    App\Service\Halcon\Report\Report\CertificadoLaboralReport:
        calls:
            - [setPdfService, ['@=service("App\\Service\\Configuracion\\Configuracion").getEmpresa(true) === "servilabor" ? service("App\\Service\\Pdf\\Halcon\\CertificadoLaboralServilaborPdf") : service("App\\Service\\Pdf\\Halcon\\CertificadoLaboralPdf")' ]]

    App\Service\Pdf\PdfCartaLaboral:
        public: true
        shared: false
    App\Service\Pdf\PdfCartaLaboralServilabor:
        public: true
        shared: false

    App\Service\Pdf\Halcon\NominaPdf:
        arguments: ["P", "mm", "Letter"]
        shared: false
    App\Service\Pdf\Halcon\CertificadoLaboralPdf:
        arguments: ["P", "mm", "Letter"]
        shared: false
    App\Service\Pdf\Halcon\CertificadoLaboralServilaborPdf:
        arguments: ["P", "mm", "Letter"]
        shared: false
    App\Service\Pdf\Halcon\CertificadoIngresosPdf:
        arguments: ["P", "mm", "Letter"]
        shared: false
    App\Service\Pdf\Halcon\LiquidacionContratoPdf:
        arguments: ["P", "mm", "Letter"]
        shared: false





    Knp\Menu\Twig\MenuExtension:
        alias: knp_menu.twig.extension

    app.menu_builder:
        factory: ['App\Menu\MenuBuilderFactory', 'test']
        class: App\Menu\MenuBuilder
        arguments: ["@knp_menu.factory"]
        tags:
            - { name: knp_menu.menu_builder, method: createMainMenu, alias: main }
            - { name: knp_menu.menu_builder, method: createHvMenu, alias: hv }
            - { name: knp_menu.menu_builder, method: createConvenioMenu, alias: convenio }

    app.menu_renderer:
        class: App\Menu\MenuRenderer
        arguments:
            - "@knp_menu.matcher"
            - "%knp_menu.renderer.list.options%"
            - "%kernel.charset%"
        tags:
            # The alias is what is used to retrieve the menu
            - { name: knp_menu.renderer, alias: custom }

    app.tokens.action_listener:
        class: App\Event\EventListener\RegistroListener
        arguments:
            - "@security.token_storage"
            - "@router"
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }


    session:
        class: Symfony\Component\HttpFoundation\Session\Session
        arguments: ['@session.storage', '@session.namespacedattributebag', '@session.flash_bag']

    session.namespacedattributebag:
        class: Symfony\Component\HttpFoundation\Session\Attribute\NamespacedAttributeBag


    Aws\S3\S3Client:
        arguments:
            -   version: '2006-03-01'
                region: "sa-east-1"
                credentials:
                    key: "%env(empresa:AWS_S3_ACCESS_ID)%"
                    secret: "%env(empresa:AWS_S3_ACCESS_SECRET)%"